{"ast":null,"code":"\"use strict\"; // Copyright (C) 2017 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar binary_1 = require(\"@stablelib/binary\");\n\nvar wipe_1 = require(\"@stablelib/wipe\");\n\nexports.BLOCK_SIZE = 128;\nexports.DIGEST_LENGTH = 64;\nexports.KEY_LENGTH = 64;\nexports.PERSONALIZATION_LENGTH = 16;\nexports.SALT_LENGTH = 16;\nexports.MAX_LEAF_SIZE = Math.pow(2, 32) - 1;\nexports.MAX_FANOUT = 255;\nexports.MAX_MAX_DEPTH = 255; // not a typo\n\nvar IV = new Uint32Array([// low bits // high bits\n0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a, 0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19]); // Note: sigma values are doubled since we store\n// 64-bit ints as two 32-bit ints in arrays.\n\nvar SIGMA = [[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], [28, 20, 8, 16, 18, 30, 26, 12, 2, 24, 0, 4, 22, 14, 10, 6], [22, 16, 24, 0, 10, 4, 30, 26, 20, 28, 6, 12, 14, 2, 18, 8], [14, 18, 6, 2, 26, 24, 22, 28, 4, 12, 10, 20, 8, 0, 30, 16], [18, 0, 10, 14, 4, 8, 20, 30, 28, 2, 22, 24, 12, 16, 6, 26], [4, 24, 12, 20, 0, 22, 16, 6, 8, 26, 14, 10, 30, 28, 2, 18], [24, 10, 2, 30, 28, 26, 8, 20, 0, 14, 12, 6, 18, 4, 16, 22], [26, 22, 14, 28, 24, 2, 6, 18, 10, 0, 30, 8, 16, 12, 4, 20], [12, 30, 28, 18, 22, 6, 0, 16, 24, 4, 26, 14, 2, 8, 20, 10], [20, 4, 16, 8, 14, 12, 2, 10, 30, 22, 18, 28, 6, 24, 26, 0], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], [28, 20, 8, 16, 18, 30, 26, 12, 2, 24, 0, 4, 22, 14, 10, 6]];\n/**\n * BLAKE2b hash function.\n */\n\nvar BLAKE2b =\n/** @class */\nfunction () {\n  function BLAKE2b(digestLength, config) {\n    if (digestLength === void 0) {\n      digestLength = 64;\n    }\n\n    this.digestLength = digestLength;\n    this.blockSize = exports.BLOCK_SIZE; // Note: Int32Arrays for state and message are used for performance reasons.\n\n    this._state = new Int32Array(IV); // hash state, initialized with IV\n\n    this._buffer = new Uint8Array(exports.BLOCK_SIZE); // buffer for data\n\n    this._bufferLength = 0; // number of bytes in buffer\n\n    this._ctr = new Uint32Array(4);\n    this._flag = new Uint32Array(4);\n    this._lastNode = false;\n    this._finished = false;\n    this._vtmp = new Uint32Array(32);\n    this._mtmp = new Uint32Array(32); // Validate digest length.\n\n    if (digestLength < 1 || digestLength > exports.DIGEST_LENGTH) {\n      throw new Error(\"blake2b: wrong digest length\");\n    } // Validate config, if present.\n\n\n    if (config) {\n      this.validateConfig(config);\n    } // Get key length from config.\n\n\n    var keyLength = 0;\n\n    if (config && config.key) {\n      keyLength = config.key.length;\n    } // Get tree fanout and maxDepth from config.\n\n\n    var fanout = 1;\n    var maxDepth = 1;\n\n    if (config && config.tree) {\n      fanout = config.tree.fanout;\n      maxDepth = config.tree.maxDepth;\n    } // Xor common parameters into state.\n\n\n    this._state[0] ^= digestLength | keyLength << 8 | fanout << 16 | maxDepth << 24; // Xor tree parameters into state.\n\n    if (config && config.tree) {\n      this._state[1] ^= config.tree.leafSize;\n      this._state[2] ^= config.tree.nodeOffsetLowBits;\n      this._state[3] ^= config.tree.nodeOffsetHighBits;\n      this._state[4] ^= config.tree.nodeDepth | config.tree.innerDigestLength << 8;\n      this._lastNode = config.tree.lastNode;\n    } // Xor salt into state.\n\n\n    if (config && config.salt) {\n      this._state[8] ^= binary_1.readUint32LE(config.salt, 0);\n      this._state[9] ^= binary_1.readUint32LE(config.salt, 4);\n      this._state[10] ^= binary_1.readUint32LE(config.salt, 8);\n      this._state[11] ^= binary_1.readUint32LE(config.salt, 12);\n    } // Xor personalization into state.\n\n\n    if (config && config.personalization) {\n      this._state[12] ^= binary_1.readUint32LE(config.personalization, 0);\n      this._state[13] ^= binary_1.readUint32LE(config.personalization, 4);\n      this._state[14] ^= binary_1.readUint32LE(config.personalization, 8);\n      this._state[15] ^= binary_1.readUint32LE(config.personalization, 12);\n    } // Save a copy of initialized state for reset.\n\n\n    this._initialState = new Uint32Array(this._state); // Process key.\n\n    if (config && config.key && keyLength > 0) {\n      this._paddedKey = new Uint8Array(exports.BLOCK_SIZE);\n\n      this._paddedKey.set(config.key); // Put padded key into buffer.\n\n\n      this._buffer.set(this._paddedKey);\n\n      this._bufferLength = exports.BLOCK_SIZE;\n    }\n  }\n\n  BLAKE2b.prototype.reset = function () {\n    // Restore initial state.\n    this._state.set(this._initialState);\n\n    if (this._paddedKey) {\n      // Put padded key into buffer.\n      this._buffer.set(this._paddedKey);\n\n      this._bufferLength = exports.BLOCK_SIZE;\n    } else {\n      this._bufferLength = 0;\n    } // Clear counters and flags.\n\n\n    wipe_1.wipe(this._ctr);\n    wipe_1.wipe(this._flag);\n    this._finished = false;\n    return this;\n  };\n\n  BLAKE2b.prototype.validateConfig = function (config) {\n    if (config.key && config.key.length > exports.KEY_LENGTH) {\n      throw new Error(\"blake2b: wrong key length\");\n    }\n\n    if (config.salt && config.salt.length !== exports.SALT_LENGTH) {\n      throw new Error(\"blake2b: wrong salt length\");\n    }\n\n    if (config.personalization && config.personalization.length !== exports.PERSONALIZATION_LENGTH) {\n      throw new Error(\"blake2b: wrong personalization length\");\n    }\n\n    if (config.tree) {\n      if (config.tree.fanout < 0 || config.tree.fanout > exports.MAX_FANOUT) {\n        throw new Error(\"blake2b: wrong tree fanout\");\n      }\n\n      if (config.tree.maxDepth < 0 || config.tree.maxDepth > exports.MAX_MAX_DEPTH) {\n        throw new Error(\"blake2b: wrong tree depth\");\n      }\n\n      if (config.tree.leafSize < 0 || config.tree.leafSize > exports.MAX_LEAF_SIZE) {\n        throw new Error(\"blake2b: wrong leaf size\");\n      }\n\n      if (config.tree.innerDigestLength < 0 || config.tree.innerDigestLength > exports.DIGEST_LENGTH) {\n        throw new Error(\"blake2b: wrong tree inner digest length\");\n      }\n    }\n  };\n\n  BLAKE2b.prototype.update = function (data, dataLength) {\n    if (dataLength === void 0) {\n      dataLength = data.length;\n    }\n\n    if (this._finished) {\n      throw new Error(\"blake2b: can't update because hash was finished.\");\n    }\n\n    var left = exports.BLOCK_SIZE - this._bufferLength;\n    var dataPos = 0;\n\n    if (dataLength === 0) {\n      return this;\n    } // Finish buffer.\n\n\n    if (dataLength > left) {\n      for (var i = 0; i < left; i++) {\n        this._buffer[this._bufferLength + i] = data[dataPos + i];\n      }\n\n      this._processBlock(exports.BLOCK_SIZE);\n\n      dataPos += left;\n      dataLength -= left;\n      this._bufferLength = 0;\n    } // Process data blocks.\n\n\n    while (dataLength > exports.BLOCK_SIZE) {\n      for (var i = 0; i < exports.BLOCK_SIZE; i++) {\n        this._buffer[i] = data[dataPos + i];\n      }\n\n      this._processBlock(exports.BLOCK_SIZE);\n\n      dataPos += exports.BLOCK_SIZE;\n      dataLength -= exports.BLOCK_SIZE;\n      this._bufferLength = 0;\n    } // Copy leftovers to buffer.\n\n\n    for (var i = 0; i < dataLength; i++) {\n      this._buffer[this._bufferLength + i] = data[dataPos + i];\n    }\n\n    this._bufferLength += dataLength;\n    return this;\n  };\n\n  BLAKE2b.prototype.finish = function (out) {\n    if (!this._finished) {\n      for (var i = this._bufferLength; i < exports.BLOCK_SIZE; i++) {\n        this._buffer[i] = 0;\n      } // Set last block flag.\n\n\n      this._flag[0] = 0xffffffff;\n      this._flag[1] = 0xffffffff; // Set last node flag if last node in tree.\n\n      if (this._lastNode) {\n        this._flag[2] = 0xffffffff;\n        this._flag[3] = 0xffffffff;\n      }\n\n      this._processBlock(this._bufferLength);\n\n      this._finished = true;\n    } // Reuse buffer as temporary space for digest.\n\n\n    var tmp = this._buffer.subarray(0, 64);\n\n    for (var i = 0; i < 16; i++) {\n      binary_1.writeUint32LE(this._state[i], tmp, i * 4);\n    }\n\n    out.set(tmp.subarray(0, out.length));\n    return this;\n  };\n\n  BLAKE2b.prototype.digest = function () {\n    var out = new Uint8Array(this.digestLength);\n    this.finish(out);\n    return out;\n  };\n\n  BLAKE2b.prototype.clean = function () {\n    wipe_1.wipe(this._vtmp);\n    wipe_1.wipe(this._mtmp);\n    wipe_1.wipe(this._state);\n    wipe_1.wipe(this._buffer);\n    wipe_1.wipe(this._initialState);\n\n    if (this._paddedKey) {\n      wipe_1.wipe(this._paddedKey);\n    }\n\n    this._bufferLength = 0;\n    wipe_1.wipe(this._ctr);\n    wipe_1.wipe(this._flag);\n    this._lastNode = false;\n    this._finished = false;\n  };\n\n  BLAKE2b.prototype.saveState = function () {\n    if (this._finished) {\n      throw new Error(\"blake2b: cannot save finished state\");\n    }\n\n    return {\n      state: new Uint32Array(this._state),\n      buffer: new Uint8Array(this._buffer),\n      bufferLength: this._bufferLength,\n      ctr: new Uint32Array(this._ctr),\n      flag: new Uint32Array(this._flag),\n      lastNode: this._lastNode,\n      paddedKey: this._paddedKey ? new Uint8Array(this._paddedKey) : undefined,\n      initialState: new Uint32Array(this._initialState)\n    };\n  };\n\n  BLAKE2b.prototype.restoreState = function (savedState) {\n    this._state.set(savedState.state);\n\n    this._buffer.set(savedState.buffer);\n\n    this._bufferLength = savedState.bufferLength;\n\n    this._ctr.set(savedState.ctr);\n\n    this._flag.set(savedState.flag);\n\n    this._lastNode = savedState.lastNode;\n\n    if (this._paddedKey) {\n      wipe_1.wipe(this._paddedKey);\n    }\n\n    this._paddedKey = savedState.paddedKey ? new Uint8Array(savedState.paddedKey) : undefined;\n\n    this._initialState.set(savedState.initialState);\n\n    return this;\n  };\n\n  BLAKE2b.prototype.cleanSavedState = function (savedState) {\n    wipe_1.wipe(savedState.state);\n    wipe_1.wipe(savedState.buffer);\n    wipe_1.wipe(savedState.initialState);\n\n    if (savedState.paddedKey) {\n      wipe_1.wipe(savedState.paddedKey);\n    }\n\n    savedState.bufferLength = 0;\n    wipe_1.wipe(savedState.ctr);\n    wipe_1.wipe(savedState.flag);\n    savedState.lastNode = false;\n  };\n\n  BLAKE2b.prototype._G = function (v, al, bl, cl, dl, ah, bh, ch, dh, ml0, mh0, ml1, mh1) {\n    var vla = v[al],\n        vha = v[ah],\n        vlb = v[bl],\n        vhb = v[bh],\n        vlc = v[cl],\n        vhc = v[ch],\n        vld = v[dl],\n        vhd = v[dh]; // 64-bit: va += vb\n\n    var w = vla & 0xffff,\n        x = vla >>> 16,\n        y = vha & 0xffff,\n        z = vha >>> 16;\n    w += vlb & 0xffff;\n    x += vlb >>> 16;\n    y += vhb & 0xffff;\n    z += vhb >>> 16;\n    x += w >>> 16;\n    y += x >>> 16;\n    z += y >>> 16;\n    vha = y & 0xffff | z << 16;\n    vla = w & 0xffff | x << 16; // 64-bit: va += m[sigma[r][2 * i + 0]]\n\n    w = vla & 0xffff;\n    x = vla >>> 16;\n    y = vha & 0xffff;\n    z = vha >>> 16;\n    w += ml0 & 0xffff;\n    x += ml0 >>> 16;\n    y += mh0 & 0xffff;\n    z += mh0 >>> 16;\n    x += w >>> 16;\n    y += x >>> 16;\n    z += y >>> 16;\n    vha = y & 0xffff | z << 16;\n    vla = w & 0xffff | x << 16; // 64-bit: vd ^= va\n\n    vld ^= vla;\n    vhd ^= vha; // 64-bit: rot(vd, 32)\n\n    w = vhd;\n    vhd = vld;\n    vld = w; // 64-bit: vc += vd\n\n    w = vlc & 0xffff;\n    x = vlc >>> 16;\n    y = vhc & 0xffff;\n    z = vhc >>> 16;\n    w += vld & 0xffff;\n    x += vld >>> 16;\n    y += vhd & 0xffff;\n    z += vhd >>> 16;\n    x += w >>> 16;\n    y += x >>> 16;\n    z += y >>> 16;\n    vhc = y & 0xffff | z << 16;\n    vlc = w & 0xffff | x << 16; // 64-bit: vb ^= vc\n\n    vlb ^= vlc;\n    vhb ^= vhc; // 64-bit: rot(vb, 24)\n\n    w = vlb << 8 | vhb >>> 24;\n    vlb = vhb << 8 | vlb >>> 24;\n    vhb = w; // 64-bit: va += vb\n\n    w = vla & 0xffff;\n    x = vla >>> 16;\n    y = vha & 0xffff;\n    z = vha >>> 16;\n    w += vlb & 0xffff;\n    x += vlb >>> 16;\n    y += vhb & 0xffff;\n    z += vhb >>> 16;\n    x += w >>> 16;\n    y += x >>> 16;\n    z += y >>> 16;\n    vha = y & 0xffff | z << 16;\n    vla = w & 0xffff | x << 16; // 64-bit: va += m[sigma[r][2 * i + 1]\n\n    w = vla & 0xffff;\n    x = vla >>> 16;\n    y = vha & 0xffff;\n    z = vha >>> 16;\n    w += ml1 & 0xffff;\n    x += ml1 >>> 16;\n    y += mh1 & 0xffff;\n    z += mh1 >>> 16;\n    x += w >>> 16;\n    y += x >>> 16;\n    z += y >>> 16;\n    vha = y & 0xffff | z << 16;\n    vla = w & 0xffff | x << 16; // 64-bit: vd ^= va\n\n    vld ^= vla;\n    vhd ^= vha; // 64-bit: rot(vd, 16)\n\n    w = vld << 16 | vhd >>> 16;\n    vld = vhd << 16 | vld >>> 16;\n    vhd = w; // 64-bit: vc += vd\n\n    w = vlc & 0xffff;\n    x = vlc >>> 16;\n    y = vhc & 0xffff;\n    z = vhc >>> 16;\n    w += vld & 0xffff;\n    x += vld >>> 16;\n    y += vhd & 0xffff;\n    z += vhd >>> 16;\n    x += w >>> 16;\n    y += x >>> 16;\n    z += y >>> 16;\n    vhc = y & 0xffff | z << 16;\n    vlc = w & 0xffff | x << 16; // 64-bit: vb ^= vc\n\n    vlb ^= vlc;\n    vhb ^= vhc; // 64-bit: rot(vb, 63)\n\n    w = vhb << 1 | vlb >>> 31;\n    vlb = vlb << 1 | vhb >>> 31;\n    vhb = w;\n    v[al] = vla;\n    v[ah] = vha;\n    v[bl] = vlb;\n    v[bh] = vhb;\n    v[cl] = vlc;\n    v[ch] = vhc;\n    v[dl] = vld;\n    v[dh] = vhd;\n  };\n\n  BLAKE2b.prototype._incrementCounter = function (n) {\n    for (var i = 0; i < 3; i++) {\n      var a = this._ctr[i] + n;\n      this._ctr[i] = a >>> 0;\n\n      if (this._ctr[i] === a) {\n        return;\n      }\n\n      n = 1;\n    }\n  };\n\n  BLAKE2b.prototype._processBlock = function (length) {\n    this._incrementCounter(length);\n\n    var v = this._vtmp;\n    v.set(this._state);\n    v.set(IV, 16);\n    v[12 * 2 + 0] ^= this._ctr[0];\n    v[12 * 2 + 1] ^= this._ctr[1];\n    v[13 * 2 + 0] ^= this._ctr[2];\n    v[13 * 2 + 1] ^= this._ctr[3];\n    v[14 * 2 + 0] ^= this._flag[0];\n    v[14 * 2 + 1] ^= this._flag[1];\n    v[15 * 2 + 0] ^= this._flag[2];\n    v[15 * 2 + 1] ^= this._flag[3];\n    var m = this._mtmp;\n\n    for (var i = 0; i < 32; i++) {\n      m[i] = binary_1.readUint32LE(this._buffer, i * 4);\n    }\n\n    for (var r = 0; r < 12; r++) {\n      this._G(v, 0, 8, 16, 24, 1, 9, 17, 25, m[SIGMA[r][0]], m[SIGMA[r][0] + 1], m[SIGMA[r][1]], m[SIGMA[r][1] + 1]);\n\n      this._G(v, 2, 10, 18, 26, 3, 11, 19, 27, m[SIGMA[r][2]], m[SIGMA[r][2] + 1], m[SIGMA[r][3]], m[SIGMA[r][3] + 1]);\n\n      this._G(v, 4, 12, 20, 28, 5, 13, 21, 29, m[SIGMA[r][4]], m[SIGMA[r][4] + 1], m[SIGMA[r][5]], m[SIGMA[r][5] + 1]);\n\n      this._G(v, 6, 14, 22, 30, 7, 15, 23, 31, m[SIGMA[r][6]], m[SIGMA[r][6] + 1], m[SIGMA[r][7]], m[SIGMA[r][7] + 1]);\n\n      this._G(v, 0, 10, 20, 30, 1, 11, 21, 31, m[SIGMA[r][8]], m[SIGMA[r][8] + 1], m[SIGMA[r][9]], m[SIGMA[r][9] + 1]);\n\n      this._G(v, 2, 12, 22, 24, 3, 13, 23, 25, m[SIGMA[r][10]], m[SIGMA[r][10] + 1], m[SIGMA[r][11]], m[SIGMA[r][11] + 1]);\n\n      this._G(v, 4, 14, 16, 26, 5, 15, 17, 27, m[SIGMA[r][12]], m[SIGMA[r][12] + 1], m[SIGMA[r][13]], m[SIGMA[r][13] + 1]);\n\n      this._G(v, 6, 8, 18, 28, 7, 9, 19, 29, m[SIGMA[r][14]], m[SIGMA[r][14] + 1], m[SIGMA[r][15]], m[SIGMA[r][15] + 1]);\n    }\n\n    for (var i = 0; i < 16; i++) {\n      this._state[i] ^= v[i] ^ v[i + 16];\n    }\n  };\n\n  return BLAKE2b;\n}();\n\nexports.BLAKE2b = BLAKE2b;\n\nfunction hash(data, digestLength, config) {\n  if (digestLength === void 0) {\n    digestLength = exports.DIGEST_LENGTH;\n  }\n\n  var h = new BLAKE2b(digestLength, config);\n  h.update(data);\n  var digest = h.digest();\n  h.clean();\n  return digest;\n}\n\nexports.hash = hash;","map":{"version":3,"sources":["../blake2b.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (C) 2017 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.BLOCK_SIZE = 128;\nexports.DIGEST_LENGTH = 64;\nexports.KEY_LENGTH = 64;\nexports.PERSONALIZATION_LENGTH = 16;\nexports.SALT_LENGTH = 16;\nexports.MAX_LEAF_SIZE = Math.pow(2, 32) - 1;\nexports.MAX_FANOUT = 255;\nexports.MAX_MAX_DEPTH = 255; // not a typo\nvar IV = new Uint32Array([\n    // low bits // high bits\n    0xf3bcc908, 0x6a09e667,\n    0x84caa73b, 0xbb67ae85,\n    0xfe94f82b, 0x3c6ef372,\n    0x5f1d36f1, 0xa54ff53a,\n    0xade682d1, 0x510e527f,\n    0x2b3e6c1f, 0x9b05688c,\n    0xfb41bd6b, 0x1f83d9ab,\n    0x137e2179, 0x5be0cd19,\n]);\n// Note: sigma values are doubled since we store\n// 64-bit ints as two 32-bit ints in arrays.\nvar SIGMA = [\n    [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30],\n    [28, 20, 8, 16, 18, 30, 26, 12, 2, 24, 0, 4, 22, 14, 10, 6],\n    [22, 16, 24, 0, 10, 4, 30, 26, 20, 28, 6, 12, 14, 2, 18, 8],\n    [14, 18, 6, 2, 26, 24, 22, 28, 4, 12, 10, 20, 8, 0, 30, 16],\n    [18, 0, 10, 14, 4, 8, 20, 30, 28, 2, 22, 24, 12, 16, 6, 26],\n    [4, 24, 12, 20, 0, 22, 16, 6, 8, 26, 14, 10, 30, 28, 2, 18],\n    [24, 10, 2, 30, 28, 26, 8, 20, 0, 14, 12, 6, 18, 4, 16, 22],\n    [26, 22, 14, 28, 24, 2, 6, 18, 10, 0, 30, 8, 16, 12, 4, 20],\n    [12, 30, 28, 18, 22, 6, 0, 16, 24, 4, 26, 14, 2, 8, 20, 10],\n    [20, 4, 16, 8, 14, 12, 2, 10, 30, 22, 18, 28, 6, 24, 26, 0],\n    [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30],\n    [28, 20, 8, 16, 18, 30, 26, 12, 2, 24, 0, 4, 22, 14, 10, 6]\n];\n/**\n * BLAKE2b hash function.\n */\nvar BLAKE2b = /** @class */ (function () {\n    function BLAKE2b(digestLength, config) {\n        if (digestLength === void 0) { digestLength = 64; }\n        this.digestLength = digestLength;\n        this.blockSize = exports.BLOCK_SIZE;\n        // Note: Int32Arrays for state and message are used for performance reasons.\n        this._state = new Int32Array(IV); // hash state, initialized with IV\n        this._buffer = new Uint8Array(exports.BLOCK_SIZE); // buffer for data\n        this._bufferLength = 0; // number of bytes in buffer\n        this._ctr = new Uint32Array(4);\n        this._flag = new Uint32Array(4);\n        this._lastNode = false;\n        this._finished = false;\n        this._vtmp = new Uint32Array(32);\n        this._mtmp = new Uint32Array(32);\n        // Validate digest length.\n        if (digestLength < 1 || digestLength > exports.DIGEST_LENGTH) {\n            throw new Error(\"blake2b: wrong digest length\");\n        }\n        // Validate config, if present.\n        if (config) {\n            this.validateConfig(config);\n        }\n        // Get key length from config.\n        var keyLength = 0;\n        if (config && config.key) {\n            keyLength = config.key.length;\n        }\n        // Get tree fanout and maxDepth from config.\n        var fanout = 1;\n        var maxDepth = 1;\n        if (config && config.tree) {\n            fanout = config.tree.fanout;\n            maxDepth = config.tree.maxDepth;\n        }\n        // Xor common parameters into state.\n        this._state[0] ^= digestLength | (keyLength << 8) | (fanout << 16) | (maxDepth << 24);\n        // Xor tree parameters into state.\n        if (config && config.tree) {\n            this._state[1] ^= config.tree.leafSize;\n            this._state[2] ^= config.tree.nodeOffsetLowBits;\n            this._state[3] ^= config.tree.nodeOffsetHighBits;\n            this._state[4] ^= config.tree.nodeDepth | (config.tree.innerDigestLength << 8);\n            this._lastNode = config.tree.lastNode;\n        }\n        // Xor salt into state.\n        if (config && config.salt) {\n            this._state[8] ^= binary_1.readUint32LE(config.salt, 0);\n            this._state[9] ^= binary_1.readUint32LE(config.salt, 4);\n            this._state[10] ^= binary_1.readUint32LE(config.salt, 8);\n            this._state[11] ^= binary_1.readUint32LE(config.salt, 12);\n        }\n        // Xor personalization into state.\n        if (config && config.personalization) {\n            this._state[12] ^= binary_1.readUint32LE(config.personalization, 0);\n            this._state[13] ^= binary_1.readUint32LE(config.personalization, 4);\n            this._state[14] ^= binary_1.readUint32LE(config.personalization, 8);\n            this._state[15] ^= binary_1.readUint32LE(config.personalization, 12);\n        }\n        // Save a copy of initialized state for reset.\n        this._initialState = new Uint32Array(this._state);\n        // Process key.\n        if (config && config.key && keyLength > 0) {\n            this._paddedKey = new Uint8Array(exports.BLOCK_SIZE);\n            this._paddedKey.set(config.key);\n            // Put padded key into buffer.\n            this._buffer.set(this._paddedKey);\n            this._bufferLength = exports.BLOCK_SIZE;\n        }\n    }\n    BLAKE2b.prototype.reset = function () {\n        // Restore initial state.\n        this._state.set(this._initialState);\n        if (this._paddedKey) {\n            // Put padded key into buffer.\n            this._buffer.set(this._paddedKey);\n            this._bufferLength = exports.BLOCK_SIZE;\n        }\n        else {\n            this._bufferLength = 0;\n        }\n        // Clear counters and flags.\n        wipe_1.wipe(this._ctr);\n        wipe_1.wipe(this._flag);\n        this._finished = false;\n        return this;\n    };\n    BLAKE2b.prototype.validateConfig = function (config) {\n        if (config.key && config.key.length > exports.KEY_LENGTH) {\n            throw new Error(\"blake2b: wrong key length\");\n        }\n        if (config.salt && config.salt.length !== exports.SALT_LENGTH) {\n            throw new Error(\"blake2b: wrong salt length\");\n        }\n        if (config.personalization &&\n            config.personalization.length !== exports.PERSONALIZATION_LENGTH) {\n            throw new Error(\"blake2b: wrong personalization length\");\n        }\n        if (config.tree) {\n            if (config.tree.fanout < 0 || config.tree.fanout > exports.MAX_FANOUT) {\n                throw new Error(\"blake2b: wrong tree fanout\");\n            }\n            if (config.tree.maxDepth < 0 || config.tree.maxDepth > exports.MAX_MAX_DEPTH) {\n                throw new Error(\"blake2b: wrong tree depth\");\n            }\n            if (config.tree.leafSize < 0 || config.tree.leafSize > exports.MAX_LEAF_SIZE) {\n                throw new Error(\"blake2b: wrong leaf size\");\n            }\n            if (config.tree.innerDigestLength < 0 ||\n                config.tree.innerDigestLength > exports.DIGEST_LENGTH) {\n                throw new Error(\"blake2b: wrong tree inner digest length\");\n            }\n        }\n    };\n    BLAKE2b.prototype.update = function (data, dataLength) {\n        if (dataLength === void 0) { dataLength = data.length; }\n        if (this._finished) {\n            throw new Error(\"blake2b: can't update because hash was finished.\");\n        }\n        var left = exports.BLOCK_SIZE - this._bufferLength;\n        var dataPos = 0;\n        if (dataLength === 0) {\n            return this;\n        }\n        // Finish buffer.\n        if (dataLength > left) {\n            for (var i = 0; i < left; i++) {\n                this._buffer[this._bufferLength + i] = data[dataPos + i];\n            }\n            this._processBlock(exports.BLOCK_SIZE);\n            dataPos += left;\n            dataLength -= left;\n            this._bufferLength = 0;\n        }\n        // Process data blocks.\n        while (dataLength > exports.BLOCK_SIZE) {\n            for (var i = 0; i < exports.BLOCK_SIZE; i++) {\n                this._buffer[i] = data[dataPos + i];\n            }\n            this._processBlock(exports.BLOCK_SIZE);\n            dataPos += exports.BLOCK_SIZE;\n            dataLength -= exports.BLOCK_SIZE;\n            this._bufferLength = 0;\n        }\n        // Copy leftovers to buffer.\n        for (var i = 0; i < dataLength; i++) {\n            this._buffer[this._bufferLength + i] = data[dataPos + i];\n        }\n        this._bufferLength += dataLength;\n        return this;\n    };\n    BLAKE2b.prototype.finish = function (out) {\n        if (!this._finished) {\n            for (var i = this._bufferLength; i < exports.BLOCK_SIZE; i++) {\n                this._buffer[i] = 0;\n            }\n            // Set last block flag.\n            this._flag[0] = 0xffffffff;\n            this._flag[1] = 0xffffffff;\n            // Set last node flag if last node in tree.\n            if (this._lastNode) {\n                this._flag[2] = 0xffffffff;\n                this._flag[3] = 0xffffffff;\n            }\n            this._processBlock(this._bufferLength);\n            this._finished = true;\n        }\n        // Reuse buffer as temporary space for digest.\n        var tmp = this._buffer.subarray(0, 64);\n        for (var i = 0; i < 16; i++) {\n            binary_1.writeUint32LE(this._state[i], tmp, i * 4);\n        }\n        out.set(tmp.subarray(0, out.length));\n        return this;\n    };\n    BLAKE2b.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    BLAKE2b.prototype.clean = function () {\n        wipe_1.wipe(this._vtmp);\n        wipe_1.wipe(this._mtmp);\n        wipe_1.wipe(this._state);\n        wipe_1.wipe(this._buffer);\n        wipe_1.wipe(this._initialState);\n        if (this._paddedKey) {\n            wipe_1.wipe(this._paddedKey);\n        }\n        this._bufferLength = 0;\n        wipe_1.wipe(this._ctr);\n        wipe_1.wipe(this._flag);\n        this._lastNode = false;\n        this._finished = false;\n    };\n    BLAKE2b.prototype.saveState = function () {\n        if (this._finished) {\n            throw new Error(\"blake2b: cannot save finished state\");\n        }\n        return {\n            state: new Uint32Array(this._state),\n            buffer: new Uint8Array(this._buffer),\n            bufferLength: this._bufferLength,\n            ctr: new Uint32Array(this._ctr),\n            flag: new Uint32Array(this._flag),\n            lastNode: this._lastNode,\n            paddedKey: this._paddedKey ? new Uint8Array(this._paddedKey) : undefined,\n            initialState: new Uint32Array(this._initialState)\n        };\n    };\n    BLAKE2b.prototype.restoreState = function (savedState) {\n        this._state.set(savedState.state);\n        this._buffer.set(savedState.buffer);\n        this._bufferLength = savedState.bufferLength;\n        this._ctr.set(savedState.ctr);\n        this._flag.set(savedState.flag);\n        this._lastNode = savedState.lastNode;\n        if (this._paddedKey) {\n            wipe_1.wipe(this._paddedKey);\n        }\n        this._paddedKey = savedState.paddedKey ? new Uint8Array(savedState.paddedKey) : undefined;\n        this._initialState.set(savedState.initialState);\n        return this;\n    };\n    BLAKE2b.prototype.cleanSavedState = function (savedState) {\n        wipe_1.wipe(savedState.state);\n        wipe_1.wipe(savedState.buffer);\n        wipe_1.wipe(savedState.initialState);\n        if (savedState.paddedKey) {\n            wipe_1.wipe(savedState.paddedKey);\n        }\n        savedState.bufferLength = 0;\n        wipe_1.wipe(savedState.ctr);\n        wipe_1.wipe(savedState.flag);\n        savedState.lastNode = false;\n    };\n    BLAKE2b.prototype._G = function (v, al, bl, cl, dl, ah, bh, ch, dh, ml0, mh0, ml1, mh1) {\n        var vla = v[al], vha = v[ah], vlb = v[bl], vhb = v[bh], vlc = v[cl], vhc = v[ch], vld = v[dl], vhd = v[dh];\n        // 64-bit: va += vb\n        var w = vla & 0xffff, x = vla >>> 16, y = vha & 0xffff, z = vha >>> 16;\n        w += vlb & 0xffff;\n        x += vlb >>> 16;\n        y += vhb & 0xffff;\n        z += vhb >>> 16;\n        x += w >>> 16;\n        y += x >>> 16;\n        z += y >>> 16;\n        vha = (y & 0xffff) | (z << 16);\n        vla = (w & 0xffff) | (x << 16);\n        // 64-bit: va += m[sigma[r][2 * i + 0]]\n        w = vla & 0xffff;\n        x = vla >>> 16;\n        y = vha & 0xffff;\n        z = vha >>> 16;\n        w += ml0 & 0xffff;\n        x += ml0 >>> 16;\n        y += mh0 & 0xffff;\n        z += mh0 >>> 16;\n        x += w >>> 16;\n        y += x >>> 16;\n        z += y >>> 16;\n        vha = (y & 0xffff) | (z << 16);\n        vla = (w & 0xffff) | (x << 16);\n        // 64-bit: vd ^= va\n        vld ^= vla;\n        vhd ^= vha;\n        // 64-bit: rot(vd, 32)\n        w = vhd;\n        vhd = vld;\n        vld = w;\n        // 64-bit: vc += vd\n        w = vlc & 0xffff;\n        x = vlc >>> 16;\n        y = vhc & 0xffff;\n        z = vhc >>> 16;\n        w += vld & 0xffff;\n        x += vld >>> 16;\n        y += vhd & 0xffff;\n        z += vhd >>> 16;\n        x += w >>> 16;\n        y += x >>> 16;\n        z += y >>> 16;\n        vhc = (y & 0xffff) | (z << 16);\n        vlc = (w & 0xffff) | (x << 16);\n        // 64-bit: vb ^= vc\n        vlb ^= vlc;\n        vhb ^= vhc;\n        // 64-bit: rot(vb, 24)\n        w = vlb << 8 | vhb >>> 24;\n        vlb = vhb << 8 | vlb >>> 24;\n        vhb = w;\n        // 64-bit: va += vb\n        w = vla & 0xffff;\n        x = vla >>> 16;\n        y = vha & 0xffff;\n        z = vha >>> 16;\n        w += vlb & 0xffff;\n        x += vlb >>> 16;\n        y += vhb & 0xffff;\n        z += vhb >>> 16;\n        x += w >>> 16;\n        y += x >>> 16;\n        z += y >>> 16;\n        vha = (y & 0xffff) | (z << 16);\n        vla = (w & 0xffff) | (x << 16);\n        // 64-bit: va += m[sigma[r][2 * i + 1]\n        w = vla & 0xffff;\n        x = vla >>> 16;\n        y = vha & 0xffff;\n        z = vha >>> 16;\n        w += ml1 & 0xffff;\n        x += ml1 >>> 16;\n        y += mh1 & 0xffff;\n        z += mh1 >>> 16;\n        x += w >>> 16;\n        y += x >>> 16;\n        z += y >>> 16;\n        vha = (y & 0xffff) | (z << 16);\n        vla = (w & 0xffff) | (x << 16);\n        // 64-bit: vd ^= va\n        vld ^= vla;\n        vhd ^= vha;\n        // 64-bit: rot(vd, 16)\n        w = vld << 16 | vhd >>> 16;\n        vld = vhd << 16 | vld >>> 16;\n        vhd = w;\n        // 64-bit: vc += vd\n        w = vlc & 0xffff;\n        x = vlc >>> 16;\n        y = vhc & 0xffff;\n        z = vhc >>> 16;\n        w += vld & 0xffff;\n        x += vld >>> 16;\n        y += vhd & 0xffff;\n        z += vhd >>> 16;\n        x += w >>> 16;\n        y += x >>> 16;\n        z += y >>> 16;\n        vhc = (y & 0xffff) | (z << 16);\n        vlc = (w & 0xffff) | (x << 16);\n        // 64-bit: vb ^= vc\n        vlb ^= vlc;\n        vhb ^= vhc;\n        // 64-bit: rot(vb, 63)\n        w = vhb << 1 | vlb >>> 31;\n        vlb = vlb << 1 | vhb >>> 31;\n        vhb = w;\n        v[al] = vla;\n        v[ah] = vha;\n        v[bl] = vlb;\n        v[bh] = vhb;\n        v[cl] = vlc;\n        v[ch] = vhc;\n        v[dl] = vld;\n        v[dh] = vhd;\n    };\n    BLAKE2b.prototype._incrementCounter = function (n) {\n        for (var i = 0; i < 3; i++) {\n            var a = this._ctr[i] + n;\n            this._ctr[i] = a >>> 0;\n            if (this._ctr[i] === a) {\n                return;\n            }\n            n = 1;\n        }\n    };\n    BLAKE2b.prototype._processBlock = function (length) {\n        this._incrementCounter(length);\n        var v = this._vtmp;\n        v.set(this._state);\n        v.set(IV, 16);\n        v[12 * 2 + 0] ^= this._ctr[0];\n        v[12 * 2 + 1] ^= this._ctr[1];\n        v[13 * 2 + 0] ^= this._ctr[2];\n        v[13 * 2 + 1] ^= this._ctr[3];\n        v[14 * 2 + 0] ^= this._flag[0];\n        v[14 * 2 + 1] ^= this._flag[1];\n        v[15 * 2 + 0] ^= this._flag[2];\n        v[15 * 2 + 1] ^= this._flag[3];\n        var m = this._mtmp;\n        for (var i = 0; i < 32; i++) {\n            m[i] = binary_1.readUint32LE(this._buffer, i * 4);\n        }\n        for (var r = 0; r < 12; r++) {\n            this._G(v, 0, 8, 16, 24, 1, 9, 17, 25, m[SIGMA[r][0]], m[SIGMA[r][0] + 1], m[SIGMA[r][1]], m[SIGMA[r][1] + 1]);\n            this._G(v, 2, 10, 18, 26, 3, 11, 19, 27, m[SIGMA[r][2]], m[SIGMA[r][2] + 1], m[SIGMA[r][3]], m[SIGMA[r][3] + 1]);\n            this._G(v, 4, 12, 20, 28, 5, 13, 21, 29, m[SIGMA[r][4]], m[SIGMA[r][4] + 1], m[SIGMA[r][5]], m[SIGMA[r][5] + 1]);\n            this._G(v, 6, 14, 22, 30, 7, 15, 23, 31, m[SIGMA[r][6]], m[SIGMA[r][6] + 1], m[SIGMA[r][7]], m[SIGMA[r][7] + 1]);\n            this._G(v, 0, 10, 20, 30, 1, 11, 21, 31, m[SIGMA[r][8]], m[SIGMA[r][8] + 1], m[SIGMA[r][9]], m[SIGMA[r][9] + 1]);\n            this._G(v, 2, 12, 22, 24, 3, 13, 23, 25, m[SIGMA[r][10]], m[SIGMA[r][10] + 1], m[SIGMA[r][11]], m[SIGMA[r][11] + 1]);\n            this._G(v, 4, 14, 16, 26, 5, 15, 17, 27, m[SIGMA[r][12]], m[SIGMA[r][12] + 1], m[SIGMA[r][13]], m[SIGMA[r][13] + 1]);\n            this._G(v, 6, 8, 18, 28, 7, 9, 19, 29, m[SIGMA[r][14]], m[SIGMA[r][14] + 1], m[SIGMA[r][15]], m[SIGMA[r][15] + 1]);\n        }\n        for (var i = 0; i < 16; i++) {\n            this._state[i] ^= v[i] ^ v[i + 16];\n        }\n    };\n    return BLAKE2b;\n}());\nexports.BLAKE2b = BLAKE2b;\nfunction hash(data, digestLength, config) {\n    if (digestLength === void 0) { digestLength = exports.DIGEST_LENGTH; }\n    var h = new BLAKE2b(digestLength, config);\n    h.update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hash = hash;\n//# sourceMappingURL=blake2b.js.map"]},"metadata":{},"sourceType":"script"}