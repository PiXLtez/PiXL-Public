{"version":3,"sources":["App.tsx","components/ConnectWallet.tsx","components/DisconnectWallet.tsx","components/Navbar/Navbar.tsx","services/mintProvider.tsx","components/Unity/UnityComponent.tsx","components/Unity/Unity.tsx","serviceWorker.js","index.js"],"names":["BeaconConnection","ConnectButton","Tezos","setContract","setWallet","setUserAddress","setUserBalance","contractAddress","setStorage","setBeaconConnection","setPublicToken","wallet","useState","setup","userAddress","a","tz","getBalance","balance","toNumber","at","contract","storage","connectWallet","requestPermissions","network","type","NetworkType","MAINNET","rpcUrl","getPKH","console","log","useEffect","BeaconWallet","name","preferredNetwork","disableDefaultEvents","eventHandlers","BeaconEvent","PAIR_INIT","handler","defaultEventCallbacks","PAIR_SUCCESS","data","publicKey","setWalletProvider","client","getActiveAccount","className","onClick","DisconnectButton","setTezos","disconnectWallet","tezosTK","TezosToolkit","removeAllAccounts","removeAllPeers","destroy","Navbar","address","publicToken","userBalance","React","navbarOpen","setNavbarOpen","id","substr","length","MintProvider","fetch","mode","method","headers","imageSrc","this","createImageSrc","alt","questDetails","Id","body","JSON","stringify","artifactUri","unityContext","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","UnityComponent","mintProvider","document","onfullscreenchange","event","setFullscreen","on","userName","score","itemName","mintContract","shareQuest","isCalled","items","setItem","mintItem","result","tempItems","push","Math","random","alert","buildCards","metaDataArray","Promise","all","map","item","split","token_id","toString","findOtherCards","compose","tzip16","tzip12","ledger","accounts","number","get","0","1","getTokenMetadata","x","decimals","filter","addCard","e","cardId","element","getElementById","send","findInitialCoin","addExtension","Tzip16Module","Tzip12Module","tokenId","setTimeout","style","height","width","border","background","user","src","href","target","App","undefined","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ceaa6844.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport \"./App.css\";\nimport Navbar from \"../src/components/Navbar/Navbar\";\nimport Unity1 from \"./components/Unity/Unity\";\nimport UnityComponent from \"./components/Unity/UnityComponent\"\n\nenum BeaconConnection {\n  NONE = \"\",\n  LISTENING = \"Listening to P2P channel\",\n  CONNECTED = \"Channel connected\",\n  PERMISSION_REQUEST_SENT = \"Permission request sent, waiting for response\",\n  PERMISSION_REQUEST_SUCCESS = \"Wallet is connected\"\n}\n\nconst App = () => {\n  const [Tezos, setTezos] = useState<TezosToolkit>(\n    new TezosToolkit(\"https://mainnet.api.tez.ie\")\n  );\n  const [contract, setContract] = useState<any>(undefined);\n  const [publicToken, setPublicToken] = useState<string | null>(\"\");\n  const [wallet, setWallet] = useState<any>(null);\n  const [userAddress, setUserAddress] = useState<string>(\"\");\n  const [userBalance, setUserBalance] = useState<number>(0);\n  const [storage, setStorage] = useState<number>(0);\n  const [copiedPublicToken, setCopiedPublicToken] = useState<boolean>(false);\n  const [beaconConnection, setBeaconConnection] = useState<boolean>(false);\n  const [activeTab, setActiveTab] = useState<string>(\"transfer\");\n\n  const contractAddress: string = \"KT1SGdop74rGobKAETcBPnz9yQkH38hZnpBh\";\n  return (\n    <><Navbar\n      Tezos={Tezos}\n      setContract={setContract}\n      setPublicToken={setPublicToken}\n      setWallet={setWallet}\n      setUserAddress={setUserAddress}\n      setUserBalance={setUserBalance}\n      setStorage={setStorage}\n      contractAddress={contractAddress}\n      setBeaconConnection={setBeaconConnection}\n      wallet={wallet}\n      publicToken={publicToken}\n      userAddress={userAddress}\n      userBalance={userBalance}\n      setTezos={setTezos} />\n        <UnityComponent\n          Tezos={Tezos}\n          publicToken={publicToken}\n          userAddress={userAddress}\n          userBalance={userBalance}\n          setUserBalance={setUserBalance}\n        />\n      </>\n  )\n};\n\nexport default App;\n","import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport {\n  NetworkType,\n  BeaconEvent,\n  defaultEventCallbacks\n} from \"@airgap/beacon-sdk\";\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\nimport { LedgerSigner } from \"@taquito/ledger-signer\";\n\ntype ButtonProps = {\n  Tezos: TezosToolkit;\n  setContract: Dispatch<SetStateAction<any>>;\n  setWallet: Dispatch<SetStateAction<any>>;\n  setUserAddress: Dispatch<SetStateAction<string>>;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  setStorage: Dispatch<SetStateAction<number>>;\n  contractAddress: string;\n  setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n  setPublicToken: Dispatch<SetStateAction<string | null>>;\n  wallet: BeaconWallet;\n};\n\nconst ConnectButton = ({\n  Tezos,\n  setContract,\n  setWallet,\n  setUserAddress,\n  setUserBalance,\n  setStorage,\n  contractAddress,\n  setBeaconConnection,\n  setPublicToken,\n  wallet\n}: ButtonProps): JSX.Element => {\n  const [loadingNano, setLoadingNano] = useState<boolean>(false);\n\n  const setup = async (userAddress: string): Promise<void> => {\n    setUserAddress(userAddress);\n    // updates balance\n    const balance = await Tezos.tz.getBalance(userAddress);\n    setUserBalance(balance.toNumber());\n    // creates contract instance\n    const contract = await Tezos.wallet.at(contractAddress);\n    const storage: any = await contract.storage();\n    setContract(contract);\n    // setStorage(storage.toNumber());\n  };\n\n  const connectWallet = async (): Promise<void> => {\n    try {\n      await wallet.requestPermissions({\n        network: {\n          type: NetworkType.MAINNET,\n          rpcUrl: \"https://mainnet.api.tez.ie\"\n        }\n      });\n      // gets user's address\n      const userAddress = await wallet.getPKH();\n      await setup(userAddress);\n      setBeaconConnection(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // creates a wallet instance\n      const wallet = new BeaconWallet({\n        name: \"Taquito Boilerplate\",\n        preferredNetwork: NetworkType.MAINNET,\n        disableDefaultEvents: true, // Disable all events / UI. This also disables the pairing alert.\n        eventHandlers: {\n          // To keep the pairing alert, we have to add the following default event handlers back\n          [BeaconEvent.PAIR_INIT]: {\n            handler: defaultEventCallbacks.PAIR_INIT\n          },\n          [BeaconEvent.PAIR_SUCCESS]: {\n            handler: data => setPublicToken(data.publicKey)\n          }\n        }\n      });\n      Tezos.setWalletProvider(wallet);\n      setWallet(wallet);\n      // checks if wallet was connected before\n      const activeAccount = await wallet.client.getActiveAccount();\n      if (activeAccount) {\n        const userAddress = await wallet.getPKH();\n        await setup(userAddress);\n        setBeaconConnection(true);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" onClick={connectWallet}>\n        <span>\n          <i className=\"fas fa-wallet\"></i>&nbsp; Sync Wallet\n        </span>\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectButton;\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport { TezosToolkit } from \"@taquito/taquito\";\n\ninterface ButtonProps {\n  wallet: BeaconWallet | null;\n  setPublicToken: Dispatch<SetStateAction<string | null>>;\n  setUserAddress: Dispatch<SetStateAction<string>>;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  setWallet: Dispatch<SetStateAction<any>>;\n  setTezos: Dispatch<SetStateAction<TezosToolkit>>;\n  setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n}\n\nconst DisconnectButton = ({\n  wallet,\n  setPublicToken,\n  setUserAddress,\n  setUserBalance,\n  setWallet,\n  setTezos,\n  setBeaconConnection\n}: ButtonProps): JSX.Element => {\n  const disconnectWallet = async (): Promise<void> => {\n    //window.localStorage.clear();\n    setUserAddress(\"\");\n    setUserBalance(0);\n    setWallet(null);\n    const tezosTK = new TezosToolkit(\"https://mainnet.api.tez.ie\");\n    setTezos(tezosTK);\n    setBeaconConnection(false);\n    setPublicToken(null);\n    console.log(\"disconnecting wallet\");\n    if (wallet) {\n      await wallet.client.removeAllAccounts();\n      await wallet.client.removeAllPeers();\n      await wallet.client.destroy();\n    }\n  };\n\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" onClick={disconnectWallet}>\n        <i className=\"fas fa-times\"></i>&nbsp; Disconnect wallet\n      </button>\n    </div>\n  );\n};\n\nexport default DisconnectButton;\n","import { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport React, { Dispatch, SetStateAction, useState } from \"react\";\nimport ConnectButton from \"../../components/ConnectWallet\";\nimport DisconnectButton from \"../../components/DisconnectWallet\";\n\ntype ButtonProps = {\n    Tezos: TezosToolkit;\n    setContract: Dispatch<SetStateAction<any>>;\n    setWallet: Dispatch<SetStateAction<any>>;\n    setUserAddress: Dispatch<SetStateAction<string>>;\n    setUserBalance: Dispatch<SetStateAction<number>>;\n    setStorage: Dispatch<SetStateAction<number>>;\n    contractAddress: string;\n    setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n    setPublicToken: Dispatch<SetStateAction<string | null>>;\n    wallet: BeaconWallet;\n    publicToken: string | null;\n    userAddress: string;\n    userBalance: number;\n    setTezos: React.Dispatch<React.SetStateAction<TezosToolkit>>\n};\n\nconst Navbar = ({\n    Tezos,\n    setContract,\n    setWallet,\n    setUserAddress,\n    setUserBalance,\n    setStorage,\n    contractAddress,\n    setBeaconConnection,\n    setPublicToken,\n    wallet,\n    publicToken,\n    userAddress,\n    userBalance,\n    setTezos,\n}: ButtonProps): JSX.Element => {\n\n    const [navbarOpen, setNavbarOpen] = React.useState(false);\n\n    const splitUserAddress = (address: string) => {\n        const first = address.substr(0, 5)\n        const last = address.substr(address.length - 5)\n        return first + \"...\" + last\n    }\n    return (\n        <>\n            <nav className=\"relative flex flex-wrap items-center justify-between px-2 py-3 bg-gray-700 mb-3\">\n                <div className=\"container px-4 mx-auto flex flex-wrap items-center justify-between\">\n                    <div className=\"w-full relative flex justify-between lg:w-auto lg:static lg:block lg:justify-start\">\n                        <a\n                            className=\"text-sm font-bold leading-relaxed inline-block mr-4 py-2 whitespace-nowrap uppercase text-white\"\n                        >\n                            PiXl\n                        </a>\n                        <button\n                            className=\"text-white cursor-pointer text-xl leading-none px-3 py-1 border border-solid border-transparent rounded bg-transparent block lg:hidden outline-none focus:outline-none\"\n                            type=\"button\"\n                            onClick={() => setNavbarOpen(!navbarOpen)}\n                        >\n                            <i className=\"fas fa-bars\"></i>\n                        </button>\n                    </div>\n                    <div\n                        className={\n                            \"lg:flex flex-grow items-center\" +\n                            (navbarOpen ? \" flex\" : \" hidden\")\n                        }\n                        id=\"example-navbar-danger\"\n                    >\n                        <ul className=\"flex flex-col lg:flex-row list-none lg:ml-auto\">\n                            <li className=\"nav-item\">\n                                {(!publicToken && !userAddress && !userBalance) ?\n                                    <ConnectButton\n                                        Tezos={Tezos}\n                                        setContract={setContract}\n                                        setPublicToken={setPublicToken}\n                                        setWallet={setWallet}\n                                        setUserAddress={setUserAddress}\n                                        setUserBalance={setUserBalance}\n                                        setStorage={setStorage}\n                                        contractAddress={contractAddress}\n                                        setBeaconConnection={setBeaconConnection}\n                                        wallet={wallet}\n                                    />\n                                    :\n                                    <div className=\"flex flex-row gap-4\">\n                                        <DisconnectButton\n                                            wallet={wallet}\n                                            setPublicToken={setPublicToken}\n                                            setUserAddress={setUserAddress}\n                                            setUserBalance={setUserBalance}\n                                            setWallet={setWallet}\n                                            setTezos={setTezos}\n                                            setBeaconConnection={setBeaconConnection}\n                                        />\n                                        {splitUserAddress(userAddress)}\n                                    </div>\n                                }\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n        </>\n    );\n}\n\nexport default Navbar","import { ItemType } from \"../components/Unity/UnityComponent\"\n\nexport class MintProvider {\n\n    constructor() {\n    }\n    async mintItem() {\n        // on a successful transfer the api should return use the object details so that we can display it to the user\n        const result = await fetch(\"http://localhost:5000/api/transfer\", {\n            mode: 'no-cors',\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        //result will be empty due to cors. Won't be an issue when both are hosted\n        return {\n            name: \"Tezzard\",\n            imageSrc: this.createImageSrc(\"zdj7WcZdmBjTNB9CowV1GPqJUFdiM41YFEkHTnwiKixgHaerZ\"),\n            alt: \"Placeholder\",\n        } as ItemType\n    }\n\n    async shareQuest(questDetails:any, Id:any) {\n        // on a successful transfer the api should return use the object details so that we can display it to the user\n        const result = await fetch(\"http://localhost:5000/api/transfer/shareQuest\", {\n            mode: 'no-cors',\n            method: 'POST',\n            body: JSON.stringify({questDetails,Id}),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        //result will be empty due to cors. Won't be an issue when both are hosted\n        return\n    }\n\n    createImageSrc(artifactUri: string | undefined) {\n        if (artifactUri) {\n            return \"https://cloudflare-ipfs.com/ipfs/\" + artifactUri\n        } else {\n            return \"error\"\n        }\n    }\n}","import React, { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport \"../../App.css\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport { setTimeout } from \"timers\";\nimport { compose, TezosToolkit, MichelsonMap } from \"@taquito/taquito\";\nimport { Tzip12Module, tzip12, TokenMetadata } from \"@taquito/tzip12\";\nimport { Tzip16Module, tzip16 } from \"@taquito/tzip16\";\nimport { BigNumber } from 'bignumber.js';\nimport { MintProvider } from \"../../services/mintProvider\";\n\ntype ButtonProps = {\n    Tezos: TezosToolkit;\n    publicToken: string | null;\n    userAddress: string;\n    userBalance: number;\n    setUserBalance: Dispatch<SetStateAction<number>>;\n};\n\nexport type ItemType = {\n    name: string,\n    imageSrc: string,\n    alt: string\n}\n\nconst unityContext = new UnityContext({\n    loaderUrl: \"Build/1.loader.js\",\n    dataUrl: \"Build/1.data\",\n    frameworkUrl: \"Build/1.framework.js\",\n    codeUrl: \"Build/1.wasm\",\n});\n\nconst UnityComponent = ({\n    Tezos,\n    publicToken,\n    userAddress,\n    userBalance,\n    setUserBalance,\n}: ButtonProps): JSX.Element => {\n    const mintProvider = new MintProvider()\n    document.onfullscreenchange = function (event) {\n        unityContext.setFullscreen(false);\n    };\n    unityContext.on(\"WhereWallet\", function (userName, score) {\n    });\n    unityContext.on(\"GameOver\", function (userName, score) {\n    });\n    unityContext.on(\"MintThis\", function (itemName, score) {\n        if (itemName) {\n            mintContract(itemName, score);\n        }\n    });\n    unityContext.on(\"ShareQuest\", function (questDetails, Id) {\n        shareQuest(questDetails, Id);\n    });\n    let isCalled = false;\n    const [items, setItem] = useState<Array<ItemType>>([]);\n\n    const mintContract = async (itemName: any, score: any) => {\n        const result = await mintProvider.mintItem()\n        const tempItems = items;\n        tempItems.push(result);\n        setItem(tempItems);\n        setUserBalance(Math.random()); // used to rerender Todo replace with better method\n    }\n\n    const shareQuest = async (questDetails:any, Id:any) => {\n        await mintProvider.shareQuest(questDetails,Id);\n        alert(\"Quest has been shared\")\n    }\n\n    const createImageSrc = (artifactUri: string | undefined) => {\n        if (artifactUri) {\n            return \"https://cloudflare-ipfs.com/ipfs/\" + artifactUri.split(\"//\")[1]\n        } else {\n            return \"error\"\n        }\n    }\n\n    const buildCards = async (metaDataArray: TokenMetadata[]) => {\n        setItem(await Promise.all(metaDataArray.map((item) => {\n            return {\n                name: item.name as string,\n                imageSrc: createImageSrc(item.artifactUri) as string,\n                alt: item.token_id.toString(),\n            }\n        })))\n    }\n\n    const findOtherCards = async () => {\n        const contractAddress = \"KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton\";\n        const contract = await Tezos.contract.at(contractAddress, compose(tzip16, tzip12));\n        const storage: any = await contract.storage();\n        const ledger = storage.ledger || storage.accounts;\n        const metaDataArray: TokenMetadata[] = await Promise.all([578802, 578806, 578810, 578813].map(async (number) => {\n            const val = await ledger.get({ 0: \"tz1dmSoZi281eKeU4B3W53LrAoqSa8kpCd6w\", 1: number });\n            if (val) {\n                return await contract.tzip12().getTokenMetadata(number);\n            } else {\n                let x: TokenMetadata = {\n                    token_id: 0,\n                    decimals: 0\n                }\n                return x as TokenMetadata\n            }\n        }))\n\n        metaDataArray.filter((item) => item.token_id !== 0)\n\n        if (metaDataArray) {\n            buildCards(metaDataArray);\n        }\n    }\n\n    const setWalletAddress = () => {\n        unityContext.send(\"GameController\", \"ConnectWallet\", userAddress);\n    }\n\n    const addCard = (id: string, e: React.MouseEvent<HTMLElement, MouseEvent>, cardId: string) => {\n        const element = document.getElementById(id);\n        if (element) {\n            element.className = \"card animate__animated animate__backOutUp\"\n        }\n        cardId === \"entry Token\" ? unityContext.send(\"GameController\", \"InsertCoin\") : unityContext.send(\"GameController\", \"AddItem\", cardId);\n\n        findOtherCards();\n    }\n\n    const findInitialCoin = async () => {\n        Tezos.addExtension(new Tzip16Module());\n        Tezos.addExtension(new Tzip12Module());\n\n        const contractAddress = \"KT1SGdop74rGobKAETcBPnz9yQkH38hZnpBh\";\n        const tokenId = 1;\n        const contract = await Tezos.contract.at(contractAddress, compose(tzip16, tzip12));\n\n        console.log(`Fetching the token metadata for the token ID ${tokenId}...`);\n        // const metatData = await contract.tzip12().getTokenMetadata(1);\n        const storage: any = await contract.storage();\n        const ledger = storage.ledger || storage.accounts;\n        const val = await ledger.get({ 0: \"tz1dmSoZi281eKeU4B3W53LrAoqSa8kpCd6w\", 1: 1 });\n        if (!val) { return }\n        let x = []\n        x.push({\n            name: \"entry token\",\n            imageSrc: \"https://cloudflare-ipfs.com/ipfs/QmPTFsFgEYfS3VV9uaTWfWUQGVqbaHa1t2npBUQZ4NiAvP\",\n            alt: \"entry Token\"\n        })\n        setItem(x)\n        setUserBalance(1);\n    }\n\n    useEffect(() => {\n        if (userAddress?.length > 1 && !isCalled) {\n            isCalled = true;\n            findInitialCoin();\n            setTimeout(() => {\n                setWalletAddress();\n            }, 10000);\n        }\n    }, [userAddress]);\n\n    return (\n        <>\n            <div className=\"flex flex-col items-center ml-auto mr-auto unity-container\">\n                <Unity unityContext={unityContext} style={{\n                    height: \"100%\",\n                    width: 950,\n                    border: \"2px solid black\",\n                    background: \"grey\",\n                }} />\n            </div>\n            {items.length > 0 ?\n                <section className=\"card-list mt-2 ml-auto mr-auto items-center justify-center\">\n                    {items.map((user) => (\n                        <div key={user.alt} id={user.alt} onClick={(e) => addCard(user.alt, e, user.alt)} className=\"card\">\n                            <img onClick={(e) => addCard(user.alt, e, user.alt)} src={user.imageSrc} alt=\"this slowpoke moves\" width=\"250\" />\n                        </div>\n                    ))}\n                </section>\n                : <div className=\"flex flex-row ml-auto mr-auto mt-10 w-6/12 h-32 justify-center\">\n                    <h1 className=\"text-white \"> Oh no! We can't find any tokens,Please make sure your wallet is synced and you have purchased the token <a className=\"underline\" href=\"https://objkt.com/asset/KT1SGdop74rGobKAETcBPnz9yQkH38hZnpBh/1\" target=\"_blank\">here</a></h1>\n                </div>\n            }\n        </>\n    );\n}\n\nexport default UnityComponent","import React, { Dispatch, SetStateAction } from \"react\";\nimport \"../../App.css\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport { setTimeout } from \"timers\";\nimport { compose, TezosToolkit, MichelsonMap } from \"@taquito/taquito\";\nimport { Tzip12Module, tzip12, TokenMetadata } from \"@taquito/tzip12\";\nimport { Tzip16Module, tzip16 } from \"@taquito/tzip16\";\nimport { BigNumber } from 'bignumber.js';\n\ninterface IWalletProps {\n    Tezos: TezosToolkit;\n    publicToken: string | null;\n    userAddress: string;\n    userBalance: number;\n    setUserBalance: Dispatch<SetStateAction<number>>;\n}\nconst unityContext  = new UnityContext({\n    loaderUrl: \"build/myunityapp.loader.js\",\n    dataUrl: \"build/myunityapp.data\",\n    frameworkUrl: \"build/myunityapp.framework.js\",\n    codeUrl: \"build/myunityapp.wasm\",\n});\n\nexport class Unity1 extends React.Component<IWalletProps> {\n    isCalled = false;\n    private items: any[] = [];\n    constructor(props: any,) {\n        super(props);\n    }\n\n    async componentDidUpdate(prevProps: IWalletProps) {\n        if (this.props.userAddress?.length > 1 && !this.isCalled) {\n            this.isCalled = true;\n            setTimeout(() => {\n                this.setWalletAddress();\n                this.soContact();\n            }, 10000);\n        }\n    }\n\n    // public setupUnityListners() {\n    //     unityContext .on(\"GotCoin\", (coinNumber: number) => {\n    //         if (coinNumber) {\n\n    //         }\n    //     });\n\n    //     unityContext .on(\"WalletConnected\", (randomInt: string) => {\n    //         if (randomInt) {\n\n    //         }\n    //     });\n\n    //     unityContext .on(\"GotItem\", (cardId: string) => {\n    //         if (cardId) {\n\n    //         }\n    //     });\n    // }\n\n    public onLoaded() {\n        if (this.props.userAddress?.length > 1 && !this.isCalled) {\n            this.setWalletAddress();\n            this.soContact();\n        }\n    }\n\n    public async soContact() {\n        this.props.Tezos.addExtension(new Tzip16Module());\n        this.props.Tezos.addExtension(new Tzip12Module());\n\n        const contractAddress = \"KT1SGdop74rGobKAETcBPnz9yQkH38hZnpBh\";\n        const tokenId = 1;\n        const contract = await this.props.Tezos.contract.at(contractAddress, compose(tzip16, tzip12));\n\n        console.log(`Fetching the token metadata for the token ID ${tokenId}...`);\n        // const metatData = await contract.tzip12().getTokenMetadata(1);\n        const storage: any = await contract.storage();\n        const ledger = storage.ledger || storage.accounts;\n        const val = await ledger.get({ 0: \"tz1dmSoZi281eKeU4B3W53LrAoqSa8kpCd6w\", 1: 1 });\n        if (!val) { return }\n        this.items.push({\n            name: \"entry token\",\n            imageSrc: \"https://cloudflare-ipfs.com/ipfs/QmPTFsFgEYfS3VV9uaTWfWUQGVqbaHa1t2npBUQZ4NiAvP\",\n            alt: \"entry Token\"\n        })\n        this.props.setUserBalance(1);\n    }\n\n\n    public addCard(id: string, e: React.MouseEvent<HTMLElement, MouseEvent>, cardId: string) {\n        const element = document.getElementById(id);\n        if (element) {\n            element.className = \"card animate__animated animate__backOutUp\"\n        }\n        cardId === \"entry Token\" ? unityContext .send(\"GameController\", \"InsertCoin\") : unityContext .send(\"GameController\", \"AddItem\", cardId);\n\n        this.findOtherCards();\n    }\n\n    private setWalletAddress() {\n        unityContext .send(\"GameController\", \"ConnectWallet\", this.props.userAddress);\n    }\n\n    private async findOtherCards() {\n        const contractAddress = \"KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton\";\n        const contract = await this.props.Tezos.contract.at(contractAddress, compose(tzip16, tzip12));\n        const metaDataArray: TokenMetadata[] = await Promise.all([578802, 578806, 578810, 578813].map(async (number) => {\n            return await contract.tzip12().getTokenMetadata(number);\n        }))\n\n        if (metaDataArray) {\n            this.buildCards(metaDataArray);\n        }\n    }\n\n    private async buildCards(metaDataArray: TokenMetadata[]) {\n        this.items = await Promise.all(metaDataArray.map((item) => {\n            return {\n                name: item.name,\n                imageSrc: this.createImageSrc(item.artifactUri),\n                alt: item.token_id,\n            }\n        }))\n        this.props.setUserBalance(2);\n    }\n\n    private createImageSrc(artifactUri: string | undefined) {\n        if (artifactUri) {\n            return \"https://cloudflare-ipfs.com/ipfs/\" + artifactUri.split(\"//\")[1]\n        } else {\n            return \"error\"\n        }\n    }\n\n    render() {\n        return (\n            <><div className=\"flex flex-col items-center ml-auto mr-auto unity-container\">\n                <Unity unityContext={unityContext} />            </div>\n                {this.items.length > 0 ?\n                    <section className=\"card-list mt-2 ml-auto mr-auto items-center justify-center\">\n                        {this.items.map((user) => (\n                            <div key={user.alt} id={user.alt} onClick={(e) => this.addCard(user.alt, e, user.alt)} className=\"card\">\n                                <img onClick={(e) => this.addCard(user.alt, e, user.alt)} src={user.imageSrc} alt=\"this slowpoke moves\" width=\"250\" />\n                            </div>\n                        ))}\n                    </section>\n                    : <div className=\"flex flex-row ml-auto mr-auto mt-10 w-6/12 h-32 justify-center\">\n                        <h1 className=\"text-white \"> Oh no! We can't find any tokens,Please make sure your wallet is synced and you have purchased the token <a className=\"underline\" href=\"https://objkt.com/asset/KT1SGdop74rGobKAETcBPnz9yQkH38hZnpBh/1\" target=\"_blank\">here</a></h1>\n                    </div>\n                }\n            </>\n        );\n    }\n\n}\nexport default Unity1;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'animate.css';\nimport './index.css';\nimport App from \"./App.tsx\";\nimport Navbar from \"../src/components/Navbar/Navbar.tsx\";\nimport CardTest from \"../src/components/CardTest/CardTest.tsx\";\nimport Unity1 from \"./components/Unity/Unity.tsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Navbar /> */}\n    <App />\n    {/* <Unity1 />\n    <CardTest /> */}\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}